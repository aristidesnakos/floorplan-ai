const fs = require('fs');
const path = require('path');
const https = require('https');

// Get the pdfjs-dist version from package.json
const packageJson = require('../package.json');
const pdfjsVersion = packageJson.dependencies['pdfjs-dist'] || 
                    packageJson.devDependencies['pdfjs-dist'] || 
                    '5.1.91';

// Clean version number (remove ^ or ~ if present)
const cleanVersion = pdfjsVersion.replace(/[\^~]/, '');

console.log(`Detected PDF.js version: ${cleanVersion}`);

// Function to download a file
function downloadFile(url, destination) {
  return new Promise((resolve, reject) => {
    console.log(`Downloading ${url} to ${destination}...`);
    
    const file = fs.createWriteStream(destination);
    
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download ${url}: ${response.statusCode} ${response.statusMessage}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        console.log(`Downloaded ${url} successfully!`);
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(destination, () => {}); // Delete the file if there was an error
      reject(err);
    });
  });
}

// Create a dynamic worker loader script
function createWorkerLoader() {
  const publicDir = path.join(__dirname, '../public');
  
  // Make sure the public directory exists
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }
  
  // Create a dynamic worker loader script
  const loaderPath = path.join(publicDir, 'pdf-worker-loader.js');
  const loaderContent = `
// Dynamic PDF.js worker loader
// Generated by download-matching-worker.js
if (typeof window !== 'undefined') {
  try {
    // Use the exact version that matches our package.json
    window.pdfjsWorkerSrc = 'https://unpkg.com/pdfjs-dist@${cleanVersion}/build/pdf.worker.min.js';
    console.log('PDF.js worker loader using version: ${cleanVersion}');
  } catch (error) {
    console.error('Error in PDF worker loader:', error);
  }
}
  `;
  
  fs.writeFileSync(loaderPath, loaderContent);
  console.log(`Created dynamic worker loader at ${loaderPath}`);
  
  // Create a simple worker script that will be used as the worker source
  const workerPath = path.join(publicDir, 'pdf.worker.js');
  const workerContent = `
// This file is used as the worker source for PDF.js
// It loads the worker from CDN with the correct version
importScripts('https://unpkg.com/pdfjs-dist@${cleanVersion}/build/pdf.worker.min.js');
  `;
  
  fs.writeFileSync(workerPath, workerContent);
  console.log(`Created worker script at ${workerPath}`);
}

// Main function
async function main() {
  try {
    // Create the worker loader script
    createWorkerLoader();
    
    // Try to download the worker file directly (as a backup)
    const publicDir = path.join(__dirname, '../public');
    const workerUrl = `https://unpkg.com/pdfjs-dist@${cleanVersion}/build/pdf.worker.min.js`;
    const workerPath = path.join(publicDir, 'pdf.worker.min.js');
    
    try {
      await downloadFile(workerUrl, workerPath);
    } catch (error) {
      console.error('Failed to download worker file:', error.message);
      console.log('Using CDN fallback instead');
    }
    
    console.log('PDF.js worker setup completed successfully');
  } catch (error) {
    console.error('Error setting up PDF.js worker:', error);
    process.exit(1);
  }
}

main();
